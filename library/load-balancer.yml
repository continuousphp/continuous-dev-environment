AWSTemplateFormatVersion: 2010-09-09
Description: Application Load Balancer Stack

Parameters:
  Vpc:
    Description: VPC identifier
    Type: String
  Subnets:
    Description: Public Subnet list
    Type: List<AWS::EC2::Subnet::Id>
  CertificateArn:
    Description: Amazon TLS Certificate ARN
    Type: String
  BaseDomain:
    Description: Base domain for the app
    Type: String

Resources:
  TargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB target security group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref SecurityGroup

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB security group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
        - FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0

  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref Subnets
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 300

  WebappTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref Vpc

  ApiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref Vpc

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref Alb
      Port: 80
      Protocol: HTTP

  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebappTargetGroup
      LoadBalancerArn: !Ref Alb
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn

  ApiListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ApiTargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - api.*
      ListenerArn: !Ref HttpsListener
      Priority: 1

  DnsEntry:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub '${BaseDomain}.'
      RecordSets:
        - Name: !Sub '${BaseDomain}.'
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt Alb.CanonicalHostedZoneID
            DNSName: !GetAtt Alb.DNSName
        - Name: !Sub '*.${BaseDomain}.'
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt Alb.CanonicalHostedZoneID
            DNSName: !GetAtt Alb.DNSName


Outputs:
  AlbHttpListener:
    Description: ALB Listener for HTTP (80)
    Value: !Ref HttpListener
  AlbHttpsListener:
    Description: ALB Listener for HTTPS (443)
    Value: !Ref HttpsListener
  TargetSecurityGroup:
    Description: Security Group for Load Balancer targets
    Value: !Ref TargetSecurityGroup
  HostedZoneId:
    Description: ALB Hosted ZoneID
    Value: !GetAtt Alb.CanonicalHostedZoneID
  DNSName:
    Description: ALB Hostname
    Value: !GetAtt Alb.DNSName
